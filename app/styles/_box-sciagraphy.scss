@import "../../node_modules/mathsass/dist/_math.scss";

// General variables
$rad:   $PI / 180;

// Date/time constants and conversions
$dayMs: 1000 * 60 * 60 * 24;
$J1970: 2440588;
$J2000: 2451545;

@function toJulian($date) {
  @return $date / $dayMs - 0.5 + $J1970;
}

@function toDays($date) {
  @return toJulian($date) - $J2000;
}

// General calculations for position
$earth: $rad * 23.4397; // obliquity of the Earth

@function rightAscension($l, $b) {
  @return atan2(sin($l) * cos($earth) - tan($b) * sin($earth), cos($l));
}

@function declination($l, $b){
  $declination: asin(sin($b) * cos($earth) + cos($b) * sin($earth) * sin($l));
  @return $declination;
}

@function azimuth($H, $phi, $dec) {
  @return atan2(sin($H), cos($H) * sin($phi) - tan($dec) * cos($phi));
}

@function altitude($H, $phi, $dec) {
  $altitude: asin(sin($phi) * sin($dec) + cos($phi) * cos($dec) * cos($H));
  @return $altitude;
}

@function siderealTime($d, $lw) {
  $siderealTime: $rad * (280.16 + 360.9856235 * $d) - $lw;
  @return $siderealTime;
}

// General sun calculations
@function solarMeanAnomaly($d) {
  $solarMeanAnomaly: $rad * (357.5291 + 0.98560028 * $d);
  @return $solarMeanAnomaly;
}

@function eclipticLongitude($M) {
  $C: $rad * (1.9148 * sin($M) + 0.02 * sin(2 * $M) + 0.0003 * sin(3 * $M)); // equation of center
  $P: $rad * 102.9372; // perihelion of the Earth

  $eclipticLongitude: $M + $C + $P + $PI;
  @return $eclipticLongitude;
}

@function sunCoordsDeclination($d) {
  $declination: declination(eclipticLongitude(solarMeanAnomaly($d)), 0);
  @return $declination;
}

@function sunCoordsRightAscension($d) {
  $rightAscension: rightAscension(eclipticLongitude(solarMeanAnomaly($d)), 0);
  @return $rightAscension;
}

@mixin box-sciagraphy($date, $lat, $lng, $height) {
  $lw:  $rad * -($lng);
  $phi: $rad * $lat;
  $d:   toDays($date);
  $H:   siderealTime($d, $lw) - sunCoordsRightAscension($d);
  $dec: sunCoordsDeclination($d);

  $azimuth:  azimuth($H, $phi, $dec);
  $altitude: altitude($H, $phi, $dec);

  @debug $azimuth;
  box-shadow: long-shadow($deg: $azimuth);
}

@function sassy-text-shadow($color: gray, $iterations: 100, $rad: 50, $deg: 360, $cos-i: 180, $sin-i: 180, $color-multiplier: 0) {
  $output: '';
  $end: $iterations;
  $radius: $rad;
  @for $i from 1 through $end {
    $color: rgba($color, ($i / $end));
    $color: adjust-hue($color, $i * $color-multiplier);
    $position: $deg / $end * $i;
    $cos: cos($position * ($PI / $cos-i));
    $x-position: $radius * $cos;
    $sin: sin($position * ($PI / $sin-i));
    $y-position: $radius * $sin;
    $spread: $i / ($iterations / 10);
    $output: $output + '#{$color} #{$x-position}px #{$y-position}px #{$spread}px';
     @if $i < $end {
       $output: $output + ', ';
     }
  }
  @return unquote($output);
}

@function long-shadow($deg: 45, $color: gray, $iterations: 100, $spread: 0) {
  $output: '';
  $color: $color;
  $end: $iterations;
  $radius: 0;
  $start: 180;
  $deg: $deg - 180;
  @for $i from 1 through $end {
    $radius: $radius + 1;
    $cos: cos($deg * ($PI / $start));
    $x-position: $radius * $cos;
    $sin: sin($deg * ($PI / $start));
    $y-position: $radius * $sin;
    $output: $output + '#{$color} #{$x-position}px #{$y-position}px #{$spread}';
    @if $i < $end {
      $output: $output + ', ';
    }
  }
  @return unquote($output);
}
